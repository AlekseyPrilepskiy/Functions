internal class Program
{
    private static void Main(string[] args)
    {
        char[,] map = {
            { '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            { '#', ' ', '.', '.', '.', '.', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '#', '#' },
            { '#', '.', '#', '#', '#', '.', '#', ' ', ' ', '*', ' ', ' ', ' ', '#', '*', '#' },
            { '#', ' ', '#', '.', '*', '.', '#', '.', '*', '*', '#', ' ', ' ', '#', '.', '#' },
            { '#', ' ', '#', '.', '.', '.', '#', '.', '#', '#', '#', ' ', ' ', '#', '.', '#' },
            { '#', ' ', ' ', '.', '#', '#', '#', '.', '#', '#', '#', ' ', ' ', '#', '.', '#' },
            { '#', '#', '#', ' ', ' ', '.', '.', '.', '#', ' ', ' ', ' ', ' ', '#', ' ', '#' },
            { '#', '.', '#', ' ', ' ', '.', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
            { '#', '.', '#', ' ', ' ', '.', '#', '#', '#', ' ', '.', ' ', ' ', ' ', ' ', '#' },
            { '#', '.', '#', ' ', ' ', ' ', '.', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
            { '#', '.', ' ', ' ', ' ', ' ', '.', ' ', ' ', '.', ' ', ' ', ' ', '.', ' ', '#' },
            { '#', '.', '#', '#', '#', '#', ' ', ' ', ' ', ' ', '#', '#', '#', ' ', ' ', '#' },
            { '#', '.', '#', '*', '*', '#', ' ', '.', '.', ' ', '#', '#', '*', ' ', ' ', '#' },
            { '#', '.', '#', '.', '*', '*', ' ', ' ', ' ', ' ', '#', '#', '.', ' ', ' ', '#' },
            { '#', '.', '#', '.', '.', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', '#', ' ', '#' },
            { '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' }
        };

        ConsoleKeyInfo pressedKey = new ConsoleKeyInfo();
        ConsoleKey upArrow = ConsoleKey.UpArrow;
        ConsoleKey downArrow = ConsoleKey.DownArrow;
        ConsoleKey leftArrow = ConsoleKey.LeftArrow;
        ConsoleKey rightArrow = ConsoleKey.RightArrow;

        int positionX = 1;
        int positionY = 1;
        int score = 0;

        bool isAlive = true;

        Console.CursorVisible = false;


        while (isAlive)
        {
            Console.ForegroundColor = ConsoleColor.DarkCyan;
            DrawMap(map);

            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.SetCursorPosition(positionX, positionY);
            Console.Write("@");

            Console.SetCursorPosition(map.GetLength(0) + 1, 1);
            Console.WriteLine($"Score: {score}");
            Console.SetCursorPosition(map.GetLength(0) + 1, 0);
            Console.WriteLine("Остерегайтесь бомб: *");

            pressedKey = Console.ReadKey();

            Console.Clear();

            MoveBehaviorHero(pressedKey, upArrow, downArrow, leftArrow, rightArrow, ref positionX, ref positionY, ref score, ref isAlive, map);
        }
    }

    private static void MoveBehaviorHero(ConsoleKeyInfo pressedKey, ConsoleKey upArrow, ConsoleKey downArrow, ConsoleKey leftArrow, ConsoleKey rightArrow,
        ref int positionX, ref int positionY, ref int score, ref bool isAlive, char[,] map)
    {
        const char Wall = '#';
        const char Coin = '.';
        const char Bomb = '*';

        int[] direction = GetDirection(pressedKey, upArrow, downArrow, leftArrow, rightArrow);

        int nextPositionX = positionX + direction[0];
        int nextPositionY = positionY + direction[1];

        char nextCell = map[nextPositionX, nextPositionY];

        switch (nextCell)
        {
            case Wall:
                break;

            case Bomb:
                Console.WriteLine("Вы взорвались!");

                isAlive = false;
                break;

            default:
                if (nextCell == Coin) 
                {
                    score++;
                    map[nextPositionX, nextPositionY] = ' ';
                }

                positionX = nextPositionX;
                positionY = nextPositionY;
                break;
        }
    }
    private static int[] GetDirection(ConsoleKeyInfo pressedKey, ConsoleKey upArrow, ConsoleKey downArrow, ConsoleKey leftArrow, ConsoleKey rightArrow)
    {
        int[] direction = { 0, 0 };

        if (pressedKey.Key == upArrow)
        {
            direction[1] = -1;
        }
        else if (pressedKey.Key == downArrow)
        {
            direction[1] = 1;
        }
        else if (pressedKey.Key == leftArrow)
        {
            direction[0] = -1;
        }
        else if (pressedKey.Key == rightArrow)
        {
            direction[0] = 1;
        }

        return direction;
    }

    private static void DrawMap(char[,] map)
    {
        for (int i = 0; i < map.GetLength(0); i++)
        {
            for (int j = 0; j < map.GetLength(1); j++)
            {
                Console.Write(map[j, i]);
            }

            Console.WriteLine();
        }
    }
}
